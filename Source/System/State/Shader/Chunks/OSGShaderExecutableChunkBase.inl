/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderExecutableChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ShaderExecutableChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ShaderExecutableChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ShaderExecutableChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ShaderExecutableChunk::_sfVariables field.
inline
ShaderProgramVariables * ShaderExecutableChunkBase::getVariables(void) const
{
    return _sfVariables.getValue();
}

//! Set the value of the ShaderExecutableChunk::_sfVariables field.
inline
void ShaderExecutableChunkBase::setVariables(ShaderProgramVariables * const value)
{
    editSField(VariablesFieldMask);

    _sfVariables.setValue(value);
}
//! Get the value of the ShaderExecutableChunk::_sfGeometryVerticesOut field.

inline
UInt32 &ShaderExecutableChunkBase::editGeometryVerticesOut(void)
{
    editSField(GeometryVerticesOutFieldMask);

    return _sfGeometryVerticesOut.getValue();
}

//! Get the value of the ShaderExecutableChunk::_sfGeometryVerticesOut field.
inline
      UInt32  ShaderExecutableChunkBase::getGeometryVerticesOut(void) const
{
    return _sfGeometryVerticesOut.getValue();
}

//! Set the value of the ShaderExecutableChunk::_sfGeometryVerticesOut field.
inline
void ShaderExecutableChunkBase::setGeometryVerticesOut(const UInt32 value)
{
    editSField(GeometryVerticesOutFieldMask);

    _sfGeometryVerticesOut.setValue(value);
}
//! Get the value of the ShaderExecutableChunk::_sfGeometryInputType field.

inline
GLenum &ShaderExecutableChunkBase::editGeometryInputType(void)
{
    editSField(GeometryInputTypeFieldMask);

    return _sfGeometryInputType.getValue();
}

//! Get the value of the ShaderExecutableChunk::_sfGeometryInputType field.
inline
const GLenum &ShaderExecutableChunkBase::getGeometryInputType(void) const
{
    return _sfGeometryInputType.getValue();
}

//! Set the value of the ShaderExecutableChunk::_sfGeometryInputType field.
inline
void ShaderExecutableChunkBase::setGeometryInputType(const GLenum &value)
{
    editSField(GeometryInputTypeFieldMask);

    _sfGeometryInputType.setValue(value);
}
//! Get the value of the ShaderExecutableChunk::_sfGeometryOutputType field.

inline
GLenum &ShaderExecutableChunkBase::editGeometryOutputType(void)
{
    editSField(GeometryOutputTypeFieldMask);

    return _sfGeometryOutputType.getValue();
}

//! Get the value of the ShaderExecutableChunk::_sfGeometryOutputType field.
inline
const GLenum &ShaderExecutableChunkBase::getGeometryOutputType(void) const
{
    return _sfGeometryOutputType.getValue();
}

//! Set the value of the ShaderExecutableChunk::_sfGeometryOutputType field.
inline
void ShaderExecutableChunkBase::setGeometryOutputType(const GLenum &value)
{
    editSField(GeometryOutputTypeFieldMask);

    _sfGeometryOutputType.setValue(value);
}
//! Get the value of the ShaderExecutableChunk::_sfGLId field.

inline
UInt32 &ShaderExecutableChunkBase::editGLId(void)
{
    editSField(GLIdFieldMask);

    return _sfGLId.getValue();
}

//! Get the value of the ShaderExecutableChunk::_sfGLId field.
inline
      UInt32  ShaderExecutableChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

//! Set the value of the ShaderExecutableChunk::_sfGLId field.
inline
void ShaderExecutableChunkBase::setGLId(const UInt32 value)
{
    editSField(GLIdFieldMask);

    _sfGLId.setValue(value);
}
//! Get the value of the ShaderExecutableChunk::_sfPointSize field.

inline
bool &ShaderExecutableChunkBase::editPointSize(void)
{
    editSField(PointSizeFieldMask);

    return _sfPointSize.getValue();
}

//! Get the value of the ShaderExecutableChunk::_sfPointSize field.
inline
      bool  ShaderExecutableChunkBase::getPointSize(void) const
{
    return _sfPointSize.getValue();
}

//! Set the value of the ShaderExecutableChunk::_sfPointSize field.
inline
void ShaderExecutableChunkBase::setPointSize(const bool value)
{
    editSField(PointSizeFieldMask);

    _sfPointSize.setValue(value);
}

//! Get the value of the \a index element the ShaderExecutableChunk::_mfVariableLocations field.
inline
      Int32  ShaderExecutableChunkBase::getVariableLocations(const UInt32 index) const
{
    return _mfVariableLocations[index];
}

inline
Int32 &ShaderExecutableChunkBase::editVariableLocations(const UInt32 index)
{
    editMField(VariableLocationsFieldMask, _mfVariableLocations);

    return _mfVariableLocations[index];
}


//! Get the value of the \a index element the ShaderExecutableChunk::_mfProceduralVariableLocations field.
inline
      Int32  ShaderExecutableChunkBase::getProceduralVariableLocations(const UInt32 index) const
{
    return _mfProceduralVariableLocations[index];
}

inline
Int32 &ShaderExecutableChunkBase::editProceduralVariableLocations(const UInt32 index)
{
    editMField(ProceduralVariableLocationsFieldMask, _mfProceduralVariableLocations);

    return _mfProceduralVariableLocations[index];
}


//! Get the value of the \a index element the ShaderExecutableChunk::_mfAttributes field.
inline
const ShaderAttribute &ShaderExecutableChunkBase::getAttributes(const UInt32 index) const
{
    return _mfAttributes[index];
}

inline
ShaderAttribute &ShaderExecutableChunkBase::editAttributes(const UInt32 index)
{
    editMField(AttributesFieldMask, _mfAttributes);

    return _mfAttributes[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void ShaderExecutableChunkBase::execSync (      ShaderExecutableChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (VertexShaderFieldMask & whichField))
        _mfVertexShader.syncWith(pFrom->_mfVertexShader,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (GeometryShaderFieldMask & whichField))
        _mfGeometryShader.syncWith(pFrom->_mfGeometryShader,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FragmentShaderFieldMask & whichField))
        _mfFragmentShader.syncWith(pFrom->_mfFragmentShader,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariablesFieldMask & whichField))
        _sfVariables.syncWith(pFrom->_sfVariables);

    if(FieldBits::NoField != (VariableLocationsFieldMask & whichField))
        _mfVariableLocations.syncWith(pFrom->_mfVariableLocations,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ProceduralVariableLocationsFieldMask & whichField))
        _mfProceduralVariableLocations.syncWith(pFrom->_mfProceduralVariableLocations,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (GeometryVerticesOutFieldMask & whichField))
        _sfGeometryVerticesOut.syncWith(pFrom->_sfGeometryVerticesOut);

    if(FieldBits::NoField != (GeometryInputTypeFieldMask & whichField))
        _sfGeometryInputType.syncWith(pFrom->_sfGeometryInputType);

    if(FieldBits::NoField != (GeometryOutputTypeFieldMask & whichField))
        _sfGeometryOutputType.syncWith(pFrom->_sfGeometryOutputType);

    if(FieldBits::NoField != (AttributesFieldMask & whichField))
        _mfAttributes.syncWith(pFrom->_mfAttributes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pFrom->_sfGLId);

    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
        _sfPointSize.syncWith(pFrom->_sfPointSize);
}
#endif


inline
const Char8 *ShaderExecutableChunkBase::getClassname(void)
{
    return "ShaderExecutableChunk";
}
OSG_GEN_CONTAINERPTR(ShaderExecutableChunk);

OSG_END_NAMESPACE

