/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonOgreJoint
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSKELETONOGREJOINTBASE_H_
#define _OSGSKELETONOGREJOINTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGDynamicsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGBaseSkeletonJoint.h" // Parent

#include "OSGVecFields.h"               // Translate type
#include "OSGMathFields.h"              // Rotate type

#include "OSGSkeletonOgreJointFields.h"

OSG_BEGIN_NAMESPACE

class SkeletonOgreJoint;

//! \brief SkeletonOgreJoint Base Class.

class OSG_DYNAMICS_DLLMAPPING SkeletonOgreJointBase : public BaseSkeletonJoint
{
  public:

    typedef BaseSkeletonJoint Inherited;
    typedef BaseSkeletonJoint ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SkeletonOgreJoint);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TranslateFieldId = Inherited::NextFieldId,
        RotateFieldId = TranslateFieldId + 1,
        ScaleFieldId = RotateFieldId + 1,
        InvBindTranslateFieldId = ScaleFieldId + 1,
        InvBindRotateFieldId = InvBindTranslateFieldId + 1,
        InvBindScaleFieldId = InvBindRotateFieldId + 1,
        OffsetTranslateFieldId = InvBindScaleFieldId + 1,
        OffsetRotateFieldId = OffsetTranslateFieldId + 1,
        OffsetScaleFieldId = OffsetRotateFieldId + 1,
        NextFieldId = OffsetScaleFieldId + 1
    };

    static const OSG::BitVector TranslateFieldMask =
        (TypeTraits<BitVector>::One << TranslateFieldId);
    static const OSG::BitVector RotateFieldMask =
        (TypeTraits<BitVector>::One << RotateFieldId);
    static const OSG::BitVector ScaleFieldMask =
        (TypeTraits<BitVector>::One << ScaleFieldId);
    static const OSG::BitVector InvBindTranslateFieldMask =
        (TypeTraits<BitVector>::One << InvBindTranslateFieldId);
    static const OSG::BitVector InvBindRotateFieldMask =
        (TypeTraits<BitVector>::One << InvBindRotateFieldId);
    static const OSG::BitVector InvBindScaleFieldMask =
        (TypeTraits<BitVector>::One << InvBindScaleFieldId);
    static const OSG::BitVector OffsetTranslateFieldMask =
        (TypeTraits<BitVector>::One << OffsetTranslateFieldId);
    static const OSG::BitVector OffsetRotateFieldMask =
        (TypeTraits<BitVector>::One << OffsetRotateFieldId);
    static const OSG::BitVector OffsetScaleFieldMask =
        (TypeTraits<BitVector>::One << OffsetScaleFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFVec3f           SFTranslateType;
    typedef SFQuaternion      SFRotateType;
    typedef SFVec3f           SFScaleType;
    typedef SFVec3f           SFInvBindTranslateType;
    typedef SFQuaternion      SFInvBindRotateType;
    typedef SFVec3f           SFInvBindScaleType;
    typedef SFVec3f           SFOffsetTranslateType;
    typedef SFQuaternion      SFOffsetRotateType;
    typedef SFVec3f           SFOffsetScaleType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFVec3f             *editSFTranslate      (void);
            const SFVec3f             *getSFTranslate       (void) const;

                  SFQuaternion        *editSFRotate         (void);
            const SFQuaternion        *getSFRotate          (void) const;

                  SFVec3f             *editSFScale          (void);
            const SFVec3f             *getSFScale           (void) const;

                  SFVec3f             *editSFInvBindTranslate(void);
            const SFVec3f             *getSFInvBindTranslate (void) const;

                  SFQuaternion        *editSFInvBindRotate  (void);
            const SFQuaternion        *getSFInvBindRotate   (void) const;

                  SFVec3f             *editSFInvBindScale   (void);
            const SFVec3f             *getSFInvBindScale    (void) const;

                  SFVec3f             *editSFOffsetTranslate(void);
            const SFVec3f             *getSFOffsetTranslate (void) const;

                  SFQuaternion        *editSFOffsetRotate   (void);
            const SFQuaternion        *getSFOffsetRotate    (void) const;

                  SFVec3f             *editSFOffsetScale    (void);
            const SFVec3f             *getSFOffsetScale     (void) const;


                  Vec3f               &editTranslate      (void);
            const Vec3f               &getTranslate       (void) const;

                  Quaternion          &editRotate         (void);
            const Quaternion          &getRotate          (void) const;

                  Vec3f               &editScale          (void);
            const Vec3f               &getScale           (void) const;

                  Vec3f               &editInvBindTranslate(void);
            const Vec3f               &getInvBindTranslate (void) const;

                  Quaternion          &editInvBindRotate  (void);
            const Quaternion          &getInvBindRotate   (void) const;

                  Vec3f               &editInvBindScale   (void);
            const Vec3f               &getInvBindScale    (void) const;

                  Vec3f               &editOffsetTranslate(void);
            const Vec3f               &getOffsetTranslate (void) const;

                  Quaternion          &editOffsetRotate   (void);
            const Quaternion          &getOffsetRotate    (void) const;

                  Vec3f               &editOffsetScale    (void);
            const Vec3f               &getOffsetScale     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTranslate      (const Vec3f &value);
            void setRotate         (const Quaternion &value);
            void setScale          (const Vec3f &value);
            void setInvBindTranslate(const Vec3f &value);
            void setInvBindRotate  (const Quaternion &value);
            void setInvBindScale   (const Vec3f &value);
            void setOffsetTranslate(const Vec3f &value);
            void setOffsetRotate   (const Quaternion &value);
            void setOffsetScale    (const Vec3f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SkeletonOgreJointTransitPtr  create          (void);
    static  SkeletonOgreJoint           *createEmpty     (void);

    static  SkeletonOgreJointTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SkeletonOgreJoint            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SkeletonOgreJointTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFVec3f           _sfTranslate;
    SFQuaternion      _sfRotate;
    SFVec3f           _sfScale;
    SFVec3f           _sfInvBindTranslate;
    SFQuaternion      _sfInvBindRotate;
    SFVec3f           _sfInvBindScale;
    SFVec3f           _sfOffsetTranslate;
    SFQuaternion      _sfOffsetRotate;
    SFVec3f           _sfOffsetScale;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SkeletonOgreJointBase(void);
    SkeletonOgreJointBase(const SkeletonOgreJointBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SkeletonOgreJointBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTranslate       (void) const;
    EditFieldHandlePtr editHandleTranslate      (void);
    GetFieldHandlePtr  getHandleRotate          (void) const;
    EditFieldHandlePtr editHandleRotate         (void);
    GetFieldHandlePtr  getHandleScale           (void) const;
    EditFieldHandlePtr editHandleScale          (void);
    GetFieldHandlePtr  getHandleInvBindTranslate (void) const;
    EditFieldHandlePtr editHandleInvBindTranslate(void);
    GetFieldHandlePtr  getHandleInvBindRotate   (void) const;
    EditFieldHandlePtr editHandleInvBindRotate  (void);
    GetFieldHandlePtr  getHandleInvBindScale    (void) const;
    EditFieldHandlePtr editHandleInvBindScale   (void);
    GetFieldHandlePtr  getHandleOffsetTranslate (void) const;
    EditFieldHandlePtr editHandleOffsetTranslate(void);
    GetFieldHandlePtr  getHandleOffsetRotate    (void) const;
    EditFieldHandlePtr editHandleOffsetRotate   (void);
    GetFieldHandlePtr  getHandleOffsetScale     (void) const;
    EditFieldHandlePtr editHandleOffsetScale    (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SkeletonOgreJointBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SkeletonOgreJointBase &source);
};

typedef SkeletonOgreJointBase *SkeletonOgreJointBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSKELETONOGREJOINTBASE_H_ */
