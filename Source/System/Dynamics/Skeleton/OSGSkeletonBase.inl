/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Skeleton!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SkeletonBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SkeletonBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SkeletonBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Skeleton::_sfUseInvBindMatrix field.

inline
bool &SkeletonBase::editUseInvBindMatrix(void)
{
    editSField(UseInvBindMatrixFieldMask);

    return _sfUseInvBindMatrix.getValue();
}

//! Get the value of the Skeleton::_sfUseInvBindMatrix field.
inline
      bool  SkeletonBase::getUseInvBindMatrix(void) const
{
    return _sfUseInvBindMatrix.getValue();
}

//! Set the value of the Skeleton::_sfUseInvBindMatrix field.
inline
void SkeletonBase::setUseInvBindMatrix(const bool value)
{
    editSField(UseInvBindMatrixFieldMask);

    _sfUseInvBindMatrix.setValue(value);
}
//! Get the value of the Skeleton::_sfCalcNormalMatrices field.

inline
bool &SkeletonBase::editCalcNormalMatrices(void)
{
    editSField(CalcNormalMatricesFieldMask);

    return _sfCalcNormalMatrices.getValue();
}

//! Get the value of the Skeleton::_sfCalcNormalMatrices field.
inline
      bool  SkeletonBase::getCalcNormalMatrices(void) const
{
    return _sfCalcNormalMatrices.getValue();
}

//! Set the value of the Skeleton::_sfCalcNormalMatrices field.
inline
void SkeletonBase::setCalcNormalMatrices(const bool value)
{
    editSField(CalcNormalMatricesFieldMask);

    _sfCalcNormalMatrices.setValue(value);
}
//! Get the value of the Skeleton::_sfJointsChanged field.

inline
OSGAny &SkeletonBase::editJointsChanged(void)
{
    editSField(JointsChangedFieldMask);

    return _sfJointsChanged.getValue();
}

//! Get the value of the Skeleton::_sfJointsChanged field.
inline
const OSGAny &SkeletonBase::getJointsChanged(void) const
{
    return _sfJointsChanged.getValue();
}

//! Set the value of the Skeleton::_sfJointsChanged field.
inline
void SkeletonBase::setJointsChanged(const OSGAny &value)
{
    editSField(JointsChangedFieldMask);

    _sfJointsChanged.setValue(value);
}

//! Get the value of the \a index element the Skeleton::_mfRoots field.
inline
Node * SkeletonBase::getRoots(const UInt32 index) const
{
    return _mfRoots[index];
}

//! Get the value of the \a index element the Skeleton::_mfJoints field.
inline
BaseSkeletonJoint * SkeletonBase::getJoints(const UInt32 index) const
{
    return _mfJoints[index];
}

//! Get the value of the \a index element the Skeleton::_mfParentJoints field.
inline
BaseSkeletonJoint * SkeletonBase::getParentJoints(const UInt32 index) const
{
    return _mfParentJoints[index];
}

//! Get the value of the \a index element the Skeleton::_mfJointMatrices field.
inline
const Matrix &SkeletonBase::getJointMatrices(const UInt32 index) const
{
    return _mfJointMatrices[index];
}

inline
Matrix &SkeletonBase::editJointMatrices(const UInt32 index)
{
    editMField(JointMatricesFieldMask, _mfJointMatrices);

    return _mfJointMatrices[index];
}


//! Get the value of the \a index element the Skeleton::_mfJointNormalMatrices field.
inline
const Matrix &SkeletonBase::getJointNormalMatrices(const UInt32 index) const
{
    return _mfJointNormalMatrices[index];
}

inline
Matrix &SkeletonBase::editJointNormalMatrices(const UInt32 index)
{
    editMField(JointNormalMatricesFieldMask, _mfJointNormalMatrices);

    return _mfJointNormalMatrices[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void SkeletonBase::execSync (      SkeletonBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (RootsFieldMask & whichField))
        _mfRoots.syncWith(pFrom->_mfRoots,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (JointsFieldMask & whichField))
        _mfJoints.syncWith(pFrom->_mfJoints,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ParentJointsFieldMask & whichField))
        _mfParentJoints.syncWith(pFrom->_mfParentJoints,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (JointMatricesFieldMask & whichField))
        _mfJointMatrices.syncWith(pFrom->_mfJointMatrices,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (JointNormalMatricesFieldMask & whichField))
        _mfJointNormalMatrices.syncWith(pFrom->_mfJointNormalMatrices,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (UseInvBindMatrixFieldMask & whichField))
        _sfUseInvBindMatrix.syncWith(pFrom->_sfUseInvBindMatrix);

    if(FieldBits::NoField != (CalcNormalMatricesFieldMask & whichField))
        _sfCalcNormalMatrices.syncWith(pFrom->_sfCalcNormalMatrices);

    if(FieldBits::NoField != (JointsChangedFieldMask & whichField))
        _sfJointsChanged.syncWith(pFrom->_sfJointsChanged);
}
#endif


inline
const Char8 *SkeletonBase::getClassname(void)
{
    return "Skeleton";
}
OSG_GEN_CONTAINERPTR(Skeleton);

OSG_END_NAMESPACE

