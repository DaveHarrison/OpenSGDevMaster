# PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
#
# This file is part of PyOpenSG.
#
# PyOpenSG is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# This script is derived from gen_bindings.py, it contains all class specific 
# tasks for the OSGClusterLib for the integration with the OpenSG CMake system
# (GV)
#

from goodies import *

import osggen
import splitGenHelper

def preScanSetup(gen_classes, fc_infos, core_mods, free_funcs, free_func_mods, exc_types):

  # Add basic classes that can just be wrapped with no customization
  for c in ["ClusterNetwork", 
            "ClusterServer",]:
      gen_classes.append(osggen.ClassInfo(c))

  ra_decl_code = """
namespace
{

bool invokeCallback(bp::object obj, const OSG::FieldContainer* fc,
                    OSG::RemoteAspect* ra)
{
   return bp::extract<bool>(obj(fc, ra));
}

void wrapRegisterCreated(OSG::RemoteAspect* self,
                         const OSG::FieldContainerType& type, bp::object func)
{
   self->registerCreated(type, boost::bind(invokeCallback, func, _1, _2));
}

void wrapRegisterDestroyed(OSG::RemoteAspect* self,
                           const OSG::FieldContainerType& type,
                           bp::object func)
{
   self->registerDestroyed(type, boost::bind(invokeCallback, func, _1, _2));
}

void wrapRegisterChanged(OSG::RemoteAspect* self,
                         const OSG::FieldContainerType& type, bp::object func)
{
   self->registerChanged(type, boost::bind(invokeCallback, func, _1, _2));
}

}
"""

  ra_reg_code = [
   'def("registerCreated", wrapRegisterCreated, (bp::arg("type"), bp::arg("func")))',
   'def("registerDestroyed", wrapRegisterDestroyed, (bp::arg("type"), bp::arg("func")))',
   'def("registerChanged", wrapRegisterChanged, (bp::arg("type"), bp::arg("func")))',
]

  gen_classes.append(
    osggen.ClassInfo("RemoteAspect",
                     excludeList = ["registerCreated", "registerDestroyed", "registerChanged"],
                     declarationCode = [ra_decl_code],
                     registrationCode = ra_reg_code)
    )

  # OpenSG exceptions to be translated into a Python exception type.
  exc_types.extend([("ClusterException", "IOError")])


def excludeFCDSetup(opensg_src_dir, fc_ignore_list, skip_fcds):

  fc_ignore_list.extend(["ImageComposer", "DisplayCalibration", "SortFirstWindow", "SortLastWindow",
                         "SepiaComposer", "BinarySwapComposer", "PipelineComposer",
                         "ParallelComposer", "BalancedMultiWindow"])



def genTemplatesSetup(template_builder, tbuilder, non_fc_template_instances):

  return



def postScanSetup(osg, template_alias_db):
  
  return



def postGenClassesSetup(osg, mb):

  return



def postFCDInfoSetup(osg, mb, adddition_exp):

  splitGenHelper.customizeWindow(osg, "ClusterWindow")  

  return
