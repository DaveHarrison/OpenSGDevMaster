/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CheckerboardCalibFilter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &CheckerboardCalibFilterBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 CheckerboardCalibFilterBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 CheckerboardCalibFilterBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the CheckerboardCalibFilter::_sfColorBlack field.

inline
Color3f &CheckerboardCalibFilterBase::editColorBlack(void)
{
    editSField(ColorBlackFieldMask);

    return _sfColorBlack.getValue();
}

//! Get the value of the CheckerboardCalibFilter::_sfColorBlack field.
inline
const Color3f &CheckerboardCalibFilterBase::getColorBlack(void) const
{
    return _sfColorBlack.getValue();
}

//! Set the value of the CheckerboardCalibFilter::_sfColorBlack field.
inline
void CheckerboardCalibFilterBase::setColorBlack(const Color3f &value)
{
    editSField(ColorBlackFieldMask);

    _sfColorBlack.setValue(value);
}
//! Get the value of the CheckerboardCalibFilter::_sfColorWhite field.

inline
Color3f &CheckerboardCalibFilterBase::editColorWhite(void)
{
    editSField(ColorWhiteFieldMask);

    return _sfColorWhite.getValue();
}

//! Get the value of the CheckerboardCalibFilter::_sfColorWhite field.
inline
const Color3f &CheckerboardCalibFilterBase::getColorWhite(void) const
{
    return _sfColorWhite.getValue();
}

//! Set the value of the CheckerboardCalibFilter::_sfColorWhite field.
inline
void CheckerboardCalibFilterBase::setColorWhite(const Color3f &value)
{
    editSField(ColorWhiteFieldMask);

    _sfColorWhite.setValue(value);
}
//! Get the value of the CheckerboardCalibFilter::_sfResolution field.

inline
UInt32 &CheckerboardCalibFilterBase::editResolution(void)
{
    editSField(ResolutionFieldMask);

    return _sfResolution.getValue();
}

//! Get the value of the CheckerboardCalibFilter::_sfResolution field.
inline
      UInt32  CheckerboardCalibFilterBase::getResolution(void) const
{
    return _sfResolution.getValue();
}

//! Set the value of the CheckerboardCalibFilter::_sfResolution field.
inline
void CheckerboardCalibFilterBase::setResolution(const UInt32 value)
{
    editSField(ResolutionFieldMask);

    _sfResolution.setValue(value);
}
//! Get the value of the CheckerboardCalibFilter::_sfCenter field.

inline
bool &CheckerboardCalibFilterBase::editCenter(void)
{
    editSField(CenterFieldMask);

    return _sfCenter.getValue();
}

//! Get the value of the CheckerboardCalibFilter::_sfCenter field.
inline
      bool  CheckerboardCalibFilterBase::getCenter(void) const
{
    return _sfCenter.getValue();
}

//! Set the value of the CheckerboardCalibFilter::_sfCenter field.
inline
void CheckerboardCalibFilterBase::setCenter(const bool value)
{
    editSField(CenterFieldMask);

    _sfCenter.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void CheckerboardCalibFilterBase::execSync (      CheckerboardCalibFilterBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ColorBlackFieldMask & whichField))
        _sfColorBlack.syncWith(pFrom->_sfColorBlack);

    if(FieldBits::NoField != (ColorWhiteFieldMask & whichField))
        _sfColorWhite.syncWith(pFrom->_sfColorWhite);

    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
        _sfResolution.syncWith(pFrom->_sfResolution);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
        _sfCenter.syncWith(pFrom->_sfCenter);
}
#endif


inline
const Char8 *CheckerboardCalibFilterBase::getClassname(void)
{
    return "CheckerboardCalibFilter";
}
OSG_GEN_CONTAINERPTR(CheckerboardCalibFilter);

OSG_END_NAMESPACE

